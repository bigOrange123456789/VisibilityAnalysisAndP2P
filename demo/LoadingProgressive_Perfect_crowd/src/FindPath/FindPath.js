import * as THREE from "three"
import { Map } from './Map.js'
export class FindPath {
    #statusPre=[]
    #statusNext=[]   
    constructor(i5) {
        this.i5=i5
        this.map=new Map()
    }
    #init(){
        this.#statusPre =[]
        this.#statusNext=[]
        let countNull=0
        for(let i=0;i<this.i5.count;i++){
            const pos = this.i5.getPosition(i)
            const rot = this.i5.getRotation(i)
            let pos2=pos
            let rot2=rot
            const next = this.map.nextStatus(pos[0],pos[2])
            if(next){
                pos2=[
                    pos[0],
                    pos[1],
                    next.pos[1],
                ]
                rot2=[
                    rot[0],
                    next.rot,
                    rot[2],
                ]
            }else{
                countNull++//统计计算寻路的人数
            }
            
            this.#statusPre.push({
                pos:pos,rot:rot
            })
            this.#statusNext.push({
                pos:pos2,rot:rot2
            })
        }
    }


    update(){
        if(!window.flag09090909){
            window.test0000=this
            for(let i=0;i<this.crowd.length;i++){
                const crowd=this.crowd[i]
                for (var i00 = 0; i00 < crowd.count; i00++) {
                    crowd.setAnimation(
                        i00,
                        5,//5,8
                        Math.random()*10000
                    )
                }
            }
            
            window.flag09090909=true
        }
        const crowd=window.avatar.crowd
        this.count=2
        for(var j=0;j<this.count;j++){
            let i = this.ids[j]///?
            let n = 0
            let de = 0
            if(i >= this.count*this.persent[0]){//?
                n = 1
                de = this.count*this.persent[0]
            }
            if(this.poslist[i]){
                let old = this.poslist[i]
                let pos = this.maps.nextstep(this.poslist[i],this.es[i])
                this.es[i] = pos.splice(-1,1)[0]
                let index = 9-pos.splice(0,1)
                this.phs[i] = pos.splice(0,1)
                this.poslist[i] = pos
                this.dp[i] = [(pos[0]-old[0])*4, (pos[1]-old[1])*4, 0]

                this.crowd[n].move(i-de, [this.dp[i][0], this.dp[i][1], 0])
                if(index <= 9)
                    this.crowd[n].setRotation(i-de, [Math.PI/2, index/4*Math.PI, 0])
                if(this.maps.grids[this.poslist[i][0]][this.poslist[i][1]].ph0==0){
                    this.poslist[i]=null
                    this.crowd[n].setRotation(i-de, [Math.PI/2,-Math.PI/2,0])
                }
            }
        }
        for(let i of this.crowd)i.update()
    }
    nextStep(){
        const gridWeight=
        [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,20,19,19,19,19,19,19,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,20,19,18,18,18,18,18,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,17,19,18,17,17,17,17,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,0,0,16,16,16,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,0,0,15,15,15,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,14,0,14,14,14,0,0,0,0,0,0],[0,0,0,0,28,28,0,0,0,0,0,0,0,0,0,0,0,13,13,13,13,13,13,0,0,0,0,0,0],[0,0,0,0,27,27,0,0,0,0,0,0,0,0,0,0,0,13,12,12,12,12,12,0,0,0,0,0,0],[0,0,0,0,26,26,0,0,0,0,0,0,0,0,0,0,0,14,12,11,11,11,11,0,0,0,0,0,0],[0,0,0,0,25,25,0,0,0,0,0,0,0,0,0,0,0,13,13,11,10,10,10,0,0,0,0,0,0],[0,0,0,0,25,24,0,0,0,0,0,0,0,0,0,0,0,12,12,0,0,9,9,0,0,0,0,0,0],[0,0,0,0,25,24,23,22,21,20,19,18,17,16,15,14,0,12,11,0,0,8,0,0,5,4,3,3,3],[0,0,0,0,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,2],[0,0,0,0,25,24,0,0,0,0,0,0,0,0,0,0,13,12,11,10,0,0,7,6,5,4,3,2,1],[0,0,0,0,25,25,0,0,0,0,0,0,0,0,0,0,0,12,11,11,0,0,0,0,0,4,3,2,2],[0,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,12,12,12,12,13,14,0,0,4,3,3,3],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,13,0,0,13,14,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,14,14,0,0,14,14,15,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,16,16,16,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,17,17,17,17,17,17,17,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]
        
    }
}